// Code generated by protoc-gen-go.
// source: game.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateGameRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *CreateGameRequest) Reset()                    { *m = CreateGameRequest{} }
func (m *CreateGameRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGameRequest) ProtoMessage()               {}
func (*CreateGameRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateGameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGameRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type CreateGameResponse struct {
}

func (m *CreateGameResponse) Reset()                    { *m = CreateGameResponse{} }
func (m *CreateGameResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGameResponse) ProtoMessage()               {}
func (*CreateGameResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Upload it as a massive blob for now, but we could potentially do streaming in the future
type UploadBinaryRequest struct {
	// Types that are valid to be assigned to Value:
	//	*UploadBinaryRequest_Key_
	//	*UploadBinaryRequest_Chunk_
	Value isUploadBinaryRequest_Value `protobuf_oneof:"value"`
}

func (m *UploadBinaryRequest) Reset()                    { *m = UploadBinaryRequest{} }
func (m *UploadBinaryRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadBinaryRequest) ProtoMessage()               {}
func (*UploadBinaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type isUploadBinaryRequest_Value interface {
	isUploadBinaryRequest_Value()
}

type UploadBinaryRequest_Key_ struct {
	Key *UploadBinaryRequest_Key `protobuf:"bytes,3,opt,name=key,oneof"`
}
type UploadBinaryRequest_Chunk_ struct {
	Chunk *UploadBinaryRequest_Chunk `protobuf:"bytes,4,opt,name=chunk,oneof"`
}

func (*UploadBinaryRequest_Key_) isUploadBinaryRequest_Value()   {}
func (*UploadBinaryRequest_Chunk_) isUploadBinaryRequest_Value() {}

func (m *UploadBinaryRequest) GetValue() isUploadBinaryRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UploadBinaryRequest) GetKey() *UploadBinaryRequest_Key {
	if x, ok := m.GetValue().(*UploadBinaryRequest_Key_); ok {
		return x.Key
	}
	return nil
}

func (m *UploadBinaryRequest) GetChunk() *UploadBinaryRequest_Chunk {
	if x, ok := m.GetValue().(*UploadBinaryRequest_Chunk_); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UploadBinaryRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UploadBinaryRequest_OneofMarshaler, _UploadBinaryRequest_OneofUnmarshaler, _UploadBinaryRequest_OneofSizer, []interface{}{
		(*UploadBinaryRequest_Key_)(nil),
		(*UploadBinaryRequest_Chunk_)(nil),
	}
}

func _UploadBinaryRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UploadBinaryRequest)
	// value
	switch x := m.Value.(type) {
	case *UploadBinaryRequest_Key_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case *UploadBinaryRequest_Chunk_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UploadBinaryRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _UploadBinaryRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UploadBinaryRequest)
	switch tag {
	case 3: // value.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UploadBinaryRequest_Key)
		err := b.DecodeMessage(msg)
		m.Value = &UploadBinaryRequest_Key_{msg}
		return true, err
	case 4: // value.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UploadBinaryRequest_Chunk)
		err := b.DecodeMessage(msg)
		m.Value = &UploadBinaryRequest_Chunk_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UploadBinaryRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UploadBinaryRequest)
	// value
	switch x := m.Value.(type) {
	case *UploadBinaryRequest_Key_:
		s := proto.Size(x.Key)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UploadBinaryRequest_Chunk_:
		s := proto.Size(x.Chunk)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UploadBinaryRequest_Key struct {
	Game    string `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Size    int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *UploadBinaryRequest_Key) Reset()                    { *m = UploadBinaryRequest_Key{} }
func (m *UploadBinaryRequest_Key) String() string            { return proto.CompactTextString(m) }
func (*UploadBinaryRequest_Key) ProtoMessage()               {}
func (*UploadBinaryRequest_Key) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0} }

func (m *UploadBinaryRequest_Key) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *UploadBinaryRequest_Key) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UploadBinaryRequest_Key) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type UploadBinaryRequest_Chunk struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Position int64  `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
}

func (m *UploadBinaryRequest_Chunk) Reset()                    { *m = UploadBinaryRequest_Chunk{} }
func (m *UploadBinaryRequest_Chunk) String() string            { return proto.CompactTextString(m) }
func (*UploadBinaryRequest_Chunk) ProtoMessage()               {}
func (*UploadBinaryRequest_Chunk) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 1} }

func (m *UploadBinaryRequest_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadBinaryRequest_Chunk) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type UploadBinaryResponse struct {
}

func (m *UploadBinaryResponse) Reset()                    { *m = UploadBinaryResponse{} }
func (m *UploadBinaryResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadBinaryResponse) ProtoMessage()               {}
func (*UploadBinaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func init() {
	proto.RegisterType((*CreateGameRequest)(nil), "api.CreateGameRequest")
	proto.RegisterType((*CreateGameResponse)(nil), "api.CreateGameResponse")
	proto.RegisterType((*UploadBinaryRequest)(nil), "api.UploadBinaryRequest")
	proto.RegisterType((*UploadBinaryRequest_Key)(nil), "api.UploadBinaryRequest.Key")
	proto.RegisterType((*UploadBinaryRequest_Chunk)(nil), "api.UploadBinaryRequest.Chunk")
	proto.RegisterType((*UploadBinaryResponse)(nil), "api.UploadBinaryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Game service

type GameClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	UploadBinary(ctx context.Context, opts ...grpc.CallOption) (Game_UploadBinaryClient, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := grpc.Invoke(ctx, "/api.Game/CreateGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UploadBinary(ctx context.Context, opts ...grpc.CallOption) (Game_UploadBinaryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Game_serviceDesc.Streams[0], c.cc, "/api.Game/UploadBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameUploadBinaryClient{stream}
	return x, nil
}

type Game_UploadBinaryClient interface {
	Send(*UploadBinaryRequest) error
	CloseAndRecv() (*UploadBinaryResponse, error)
	grpc.ClientStream
}

type gameUploadBinaryClient struct {
	grpc.ClientStream
}

func (x *gameUploadBinaryClient) Send(m *UploadBinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameUploadBinaryClient) CloseAndRecv() (*UploadBinaryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Game service

type GameServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	UploadBinary(Game_UploadBinaryServer) error
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Game/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UploadBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).UploadBinary(&gameUploadBinaryServer{stream})
}

type Game_UploadBinaryServer interface {
	SendAndClose(*UploadBinaryResponse) error
	Recv() (*UploadBinaryRequest, error)
	grpc.ServerStream
}

type gameUploadBinaryServer struct {
	grpc.ServerStream
}

func (x *gameUploadBinaryServer) SendAndClose(m *UploadBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameUploadBinaryServer) Recv() (*UploadBinaryRequest, error) {
	m := new(UploadBinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Game_CreateGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBinary",
			Handler:       _Game_UploadBinary_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0xa5, 0x2c, 0x15, 0x1d, 0xb9, 0xb8, 0x12, 0x5c, 0x1b, 0x63, 0x48, 0x4f, 0x3d, 0x35, 0x06,
	0x13, 0x3d, 0x1a, 0xe1, 0x50, 0x12, 0x6e, 0x9b, 0xf8, 0x01, 0xab, 0x4c, 0xea, 0x06, 0xda, 0x5d,
	0xbb, 0x2d, 0x49, 0xfd, 0x04, 0x4f, 0x7e, 0xb2, 0xd9, 0xc5, 0x6a, 0x0d, 0xe0, 0xed, 0xcd, 0xcc,
	0x9b, 0xd7, 0x79, 0xaf, 0x0b, 0x90, 0x8a, 0x0c, 0x63, 0x5d, 0xa8, 0x52, 0x51, 0x22, 0xb4, 0x0c,
	0x1f, 0xe1, 0x6c, 0x56, 0xa0, 0x28, 0x31, 0x11, 0x19, 0x72, 0x7c, 0xab, 0xd0, 0x94, 0x94, 0x42,
	0x2f, 0x17, 0x19, 0x32, 0x6f, 0xec, 0x45, 0x27, 0xdc, 0x61, 0xca, 0xa0, 0xbf, 0xc1, 0xc2, 0x48,
	0x95, 0xb3, 0xae, 0x6b, 0x37, 0x65, 0x38, 0x04, 0xda, 0x96, 0x30, 0x5a, 0xe5, 0x06, 0xc3, 0x8f,
	0x2e, 0x9c, 0x3f, 0xe9, 0xb5, 0x12, 0xcb, 0xa9, 0xcc, 0x45, 0x51, 0x37, 0xda, 0x37, 0x40, 0x56,
	0x58, 0x33, 0x32, 0xf6, 0xa2, 0xd3, 0xc9, 0x55, 0x2c, 0xb4, 0x8c, 0xf7, 0xd0, 0xe2, 0x05, 0xd6,
	0xf3, 0x0e, 0xb7, 0x54, 0x7a, 0x07, 0xfe, 0xcb, 0x6b, 0x95, 0xaf, 0x58, 0xcf, 0xed, 0x5c, 0x1f,
	0xdc, 0x99, 0x59, 0xd6, 0xbc, 0xc3, 0xb7, 0xf4, 0x20, 0x01, 0xb2, 0xc0, 0xda, 0x9a, 0x49, 0x5b,
	0x66, 0xd2, 0x7f, 0xcd, 0x58, 0xb6, 0x91, 0xef, 0xe8, 0xee, 0x23, 0xdc, 0xe1, 0xe0, 0x1e, 0x7c,
	0x27, 0x6d, 0x87, 0x4b, 0x51, 0x0a, 0x27, 0x35, 0xe0, 0x0e, 0xd3, 0x00, 0x8e, 0xb5, 0x32, 0xb2,
	0x6c, 0xb4, 0x08, 0xff, 0xa9, 0xa7, 0x7d, 0xf0, 0x37, 0x62, 0x5d, 0x61, 0x38, 0x82, 0xe1, 0xdf,
	0x83, 0xb7, 0x21, 0x4d, 0x3e, 0x3d, 0xe8, 0xd9, 0xd4, 0xe8, 0x03, 0xc0, 0x6f, 0x86, 0x74, 0xe4,
	0x2c, 0xee, 0xfc, 0x97, 0xe0, 0x62, 0xa7, 0xff, 0x1d, 0x76, 0x87, 0x26, 0x30, 0x68, 0x7f, 0x81,
	0xb2, 0x43, 0x29, 0x05, 0x97, 0x7b, 0x26, 0x8d, 0x4c, 0xe4, 0x3d, 0x1f, 0xb9, 0xc7, 0x71, 0xfb,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x60, 0xa5, 0x29, 0x23, 0x2a, 0x02, 0x00, 0x00,
}
